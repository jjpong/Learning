<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>概念圖製作工具</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        .controls {
            padding: 10px;
            background: #f5f5f5;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .toolbar {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }
        .canvas-container {
            flex-grow: 1;
            border: 2px solid #ccc;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            background: #fff;
        }
        #canvas {
            width: 100%;
            height: 100%;
        }
        .concept-node {
            position: absolute;
            background: #e3f2fd;
            border: 2px solid #2196f3;
            border-radius: 8px;
            padding: 10px;
            cursor: move;
            user-select: none;
            min-width: 100px;
            text-align: center;
    position: absolute;
    z-index: 2; /* 確保概念方塊在連線上方 */
        }
        .concept-node.selected {
            border-color: #f44336;
            background: #ffebee;
        }
        .concept-node.editable {
            padding: 0;
        }

        .concept-node.editable input {
            width: calc(100% - 20px);
            padding: 10px;
            border: none;
            background: transparent;
            text-align: center;
            outline: none;
        }
        .connector-line {
            position: absolute;
            background: #000;
            height: 2px;
            transform-origin: left center;
        }
        .connector-text {
            position: absolute;
            background: white;
            padding: 2px 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            transform: translate(-50%, -50%);
    z-index: 3; /* 確保關連詞彙在最上層 */

        }
/* 在原有的 style 標籤中添加 */
.canvas-container {
    position: relative;
}

#svgContainer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1; /* 設置較低的 z-index */
}
/* 在 style 標籤中添加 */
.concept-tooltip {
    display: none;
    position: absolute;
    background: #fff;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 1000;
    top: -40px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
}

.concept-node:hover .concept-tooltip {
    display: block;
}

.connection-path {
    fill: none;
    stroke: #000;
    stroke-width: 2;
}

.control-point {
    fill: #2196f3;
    cursor: move;
    pointer-events: all;
}

.control-point:hover {
    fill: #1976d2;
}

.connector-text {
    pointer-events: all;
    cursor: move;
}
        button {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            background: #2196f3;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background: #1976d2;
        }
        select {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            min-width: 150px;
        }
<style>
        body {
            overscroll-behavior: none; /* 防止過度滾動 */
            touch-action: none; /* 防止預設觸控行為 */
            position: fixed; /* 防止 iOS 的彈性滾動 */
            width: 100%;
            height: 100%;
        }
        
        .canvas-container {
            touch-action: none; /* 防止預設觸控行為 */
        }

        .concept-node {
            touch-action: none; /* 防止預設觸控行為 */
        }
    </style>
</head>
<body>
   <div class="controls">
    <div class="toolbar">
        <select id="chapter">
            <option value="">選擇章節</option>
        </select>
        <select id="conceptList" onchange="handleConceptSelect(this.value)">
            <option value="">選擇概念</option>
            <option value="custom">自訂概念</option>
        </select>
        <select id="connectorList">
            <option value="">選擇關連詞彙</option>
        </select>
        <button onclick="addConnection()">連接所選概念</button>
        <button onclick="deleteSelected()">刪除選取</button>
        <button onclick="undo()">復原</button>
    </div>
    <div class="toolbar">
        <button onclick="exportToDrawIO()">匯出 draw.io</button>
        <button onclick="exportToPDF()">匯出 PDF</button>
        <button onclick="exportToPNG()">匯出 PNG</button>

    </div>
</div>
<div class="canvas-container">
    <div id="canvas"></div>
    <svg id="svgContainer">
        <defs>
            <marker id="arrowhead" markerWidth="10" markerHeight="7" 
                refX="9" refY="3.5" orient="auto">
                <polygon points="0 0, 10 3.5, 0 7" fill="#000"/>
            </marker>
        </defs>
    </svg>
</div>

    <script>
        // 全域變數
        let concepts = [];
        let connections = [];
        let selectedNodes = [];
        let draggedNode = null;
        let dragOffset = { x: 0, y: 0 };
        let undoStack = [];
        let globalData = null;

        // 初始化
        const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzeMh9jYxy1ga15rxAeeffLai5duISknPyPifGNZEXwgEc64qz4NyyHffhpXnsPm_7Lig/exec';

        // 載入資料
        fetch(SCRIPT_URL)
            .then(response => response.json())
            .then(data => {
                globalData = data;
                initializeChapterSelect(data.chapters);
            })
            .catch(error => console.error('Error:', error));

        // 初始化章節選單
        function initializeChapterSelect(chapters) {
            const chapterSelect = document.getElementById('chapter');
            chapters.forEach(chapter => {
                const option = document.createElement('option');
                option.value = chapter.code;
                option.textContent = `${chapter.code} - ${chapter.name}`;
                chapterSelect.appendChild(option);
            });

            chapterSelect.addEventListener('change', updateConceptsAndConnectors);
        }

        // 更新概念和選擇關連詞彙選單
        function updateConceptsAndConnectors() {
            const chapterCode = document.getElementById('chapter').value;
            const conceptSelect = document.getElementById('conceptList');
            const connectorSelect = document.getElementById('connectorList');

            conceptSelect.innerHTML = '<option value="">選擇概念</option><option value="custom">自訂概念</option>';
            connectorSelect.innerHTML = '<option value="">選擇關連詞彙</option>';

            if (chapterCode && globalData.chapterData[chapterCode]) {
                const chapterData = globalData.chapterData[chapterCode];
                
                chapterData.concepts.forEach(concept => {
                    const option = document.createElement('option');
                    option.value = concept;
                    option.textContent = concept;
                    conceptSelect.appendChild(option);
                });

                chapterData.connectors.forEach(connector => {
                    const option = document.createElement('option');
                    option.value = connector;
                    option.textContent = connector;
                    connectorSelect.appendChild(option);
                });
            }
        }

        // 處理概念選擇
        function handleConceptSelect(value) {
            if (!value) return;
            
            if (value === "custom") {
                createEditableNode();
            } else {
                createNode(value);
            }
            
            document.getElementById('conceptList').value = ''; // 重置選單
            saveState();
        }

        // 創建可編輯的概念節點
        function createEditableNode() {
            const node = document.createElement('div');
            node.className = 'concept-node editable';
            
            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = '輸入概念';
            input.addEventListener('blur', function() {
                if (this.value.trim()) {
                    node.textContent = this.value;
                    node.classList.remove('editable');
                } else {
                    node.remove();
                }
            });
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    this.blur();
                }
            });

            node.appendChild(input);
            node.style.left = Math.random() * (canvas.offsetWidth - 150) + 'px';
            node.style.top = Math.random() * (canvas.offsetHeight - 80) + 'px';

            node.addEventListener('mousedown', startDrag);
            node.addEventListener('click', toggleSelect);

            document.getElementById('canvas').appendChild(node);
            concepts.push(node);
            
            input.focus();
            return node;
        }

        // 創建概念節點
 function createNode(text) {
        const node = document.createElement('div');
        node.className = 'concept-node';
        node.textContent = text;
        node.style.left = Math.random() * (canvas.offsetWidth - 150) + 'px';
        node.style.top = Math.random() * (canvas.offsetHeight - 80) + 'px';

        const tooltip = document.createElement('div');
        tooltip.className = 'concept-tooltip';
        tooltip.textContent = globalData.conceptDescriptions[text] || '暫無描述';
        node.appendChild(tooltip);

        // 添加觸控事件支援
        if (window.PointerEvent) {
            node.addEventListener('pointerdown', startDrag);
        } else {
            node.addEventListener('mousedown', startDrag);
            node.addEventListener('touchstart', startDrag);
        }
        node.addEventListener('click', toggleSelect);

        document.getElementById('canvas').appendChild(node);
        concepts.push(node);
        return node;
    }

        // 拖曳相關函數
            function startDrag(e) {
        e.preventDefault(); // 防止預設行為
        if (e.target.tagName === 'INPUT') return;
        
        draggedNode = e.target;
        
        // 處理滑鼠事件
        if (e.type === 'mousedown') {
            const rect = draggedNode.getBoundingClientRect();
            dragOffset.x = e.clientX - rect.left;
            dragOffset.y = e.clientY - rect.top;
        }
        // 處理觸控事件
        else if (e.type === 'touchstart') {
            const touch = e.touches[0];
            const rect = draggedNode.getBoundingClientRect();
            dragOffset.x = touch.clientX - rect.left;
            dragOffset.y = touch.clientY - rect.top;
        }

        // 添加事件監聽器
        if (window.PointerEvent) {
            document.addEventListener('pointermove', drag);
            document.addEventListener('pointerup', stopDrag);
        } else {
            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', stopDrag);
            document.addEventListener('touchmove', drag, { passive: false });
            document.addEventListener('touchend', stopDrag);
        }
    }

    // 修改 drag 函數
    function drag(e) {
        e.preventDefault(); // 防止預設行為
        if (!draggedNode) return;

        const canvas = document.getElementById('canvas');
        const rect = canvas.getBoundingClientRect();
        
        let clientX, clientY;
        
        // 處理不同類型的事件
        if (e.type === 'mousemove' || e.type === 'pointermove') {
            clientX = e.clientX;
            clientY = e.clientY;
        } else if (e.type === 'touchmove') {
            const touch = e.touches[0];
            clientX = touch.clientX;
            clientY = touch.clientY;
        }

        let left = clientX - rect.left - dragOffset.x;
        let top = clientY - rect.top - dragOffset.y;

        // 確保節點不會超出畫布範圍
        left = Math.max(0, Math.min(left, canvas.offsetWidth - draggedNode.offsetWidth));
        top = Math.max(0, Math.min(top, canvas.offsetHeight - draggedNode.offsetHeight));

        draggedNode.style.left = left + 'px';
        draggedNode.style.top = top + 'px';

        updateConnections();
    }

    // 修改 stopDrag 函數
    function stopDrag(e) {
        if (draggedNode) {
            saveState();
            draggedNode = null;
            
            // 移除所有事件監聽器
            if (window.PointerEvent) {
                document.removeEventListener('pointermove', drag);
                document.removeEventListener('pointerup', stopDrag);
            } else {
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stopDrag);
                document.removeEventListener('touchmove', drag);
                document.removeEventListener('touchend', stopDrag);
            }
        }
    }
    // 在初始化時添加觸控事件監聽
    function initializeTouchEvents() {
        concepts.forEach(node => {
            if (window.PointerEvent) {
                node.addEventListener('pointerdown', startDrag);
            } else {
                node.addEventListener('mousedown', startDrag);
                node.addEventListener('touchstart', startDrag);
            }
        });
    }

        // 選取節點
        function toggleSelect(e) {
            if (e.target.tagName === 'INPUT') return;
            
            const node = e.target;
            if (node.classList.contains('selected')) {
                node.classList.remove('selected');
                selectedNodes = selectedNodes.filter(n => n !== node);
            } else {
                if (selectedNodes.length < 2) {
                    node.classList.add('selected');
                    selectedNodes.push(node);
                }
            }
        }

        // 連接節點
        function addConnection() {
            if (selectedNodes.length !== 2) {
                alert('請選擇兩個概念節點進行連接');
                return;
            }

            const connector = document.getElementById('connectorList').value;
            
            if (!connector) {
                alert('請選擇關連詞彙');
                return;
            }

            createConnection(selectedNodes[0], selectedNodes[1], connector);
            selectedNodes.forEach(node => node.classList.remove('selected'));
            selectedNodes = [];
            saveState();
        }

        // 創建連接線
function createConnection(node1, node2, text) {
    const connection = {
        from: node1,
        to: node2,
        text: text,
        path: document.createElementNS("http://www.w3.org/2000/svg", "path"),
        textElement: document.createElement('div'),
        controlPoint1: document.createElementNS("http://www.w3.org/2000/svg", "circle"),
        controlPoint2: document.createElementNS("http://www.w3.org/2000/svg", "circle"),
        controlPoints: { x1: 0, y1: 0, x2: 0, y2: 0 }
    };

    // 設置路徑
    connection.path.setAttribute('class', 'connection-path');
    connection.path.setAttribute('marker-end', 'url(#arrowhead)');

    // 設置控制點
    connection.controlPoint1.setAttribute('class', 'control-point');
    connection.controlPoint2.setAttribute('class', 'control-point');
    connection.controlPoint1.setAttribute('r', '4');
    connection.controlPoint2.setAttribute('r', '4');

    // 添加控制點拖曳事件
    setupControlPointDrag(connection.controlPoint1, connection, 1);
    setupControlPointDrag(connection.controlPoint2, connection, 2);

    // 設置文字
    connection.textElement.className = 'connector-text';
    connection.textElement.textContent = text;

    // 添加到 SVG
    const svgContainer = document.getElementById('svgContainer');
    svgContainer.appendChild(connection.path);
    svgContainer.appendChild(connection.controlPoint1);
    svgContainer.appendChild(connection.controlPoint2);
    document.getElementById('canvas').appendChild(connection.textElement);

    connections.push(connection);
    updateConnections();
}

// 添加控制點拖曳功能
function setupControlPointDrag(controlPoint, connection, pointNumber) {
    let isDragging = false;
    let currentX;
    let currentY;

    controlPoint.addEventListener('mousedown', startDragging);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDragging);

    function startDragging(e) {
        isDragging = true;
        connection.isDragging = true;
        currentX = e.clientX;
        currentY = e.clientY;
        e.stopPropagation();
    }

    function drag(e) {
        if (!isDragging) return;

        const dx = e.clientX - currentX;
        const dy = e.clientY - currentY;
        currentX = e.clientX;
        currentY = e.clientY;

        if (pointNumber === 1) {
            connection.controlPoints.x1 += dx;
            connection.controlPoints.y1 += dy;
        } else {
            connection.controlPoints.x2 += dx;
            connection.controlPoints.y2 += dy;
        }

        // 更新初始狀態
        const rect1 = connection.from.getBoundingClientRect();
        const canvasRect = document.getElementById('canvas').getBoundingClientRect();
        const x1 = rect1.left + rect1.width/2 - canvasRect.left;
        const y1 = rect1.top + rect1.height/2 - canvasRect.top;

        connection.initialState = {
            ...connection.initialState,
            cp1x: connection.controlPoints.x1 - x1,
            cp1y: connection.controlPoints.y1 - y1,
            cp2x: connection.controlPoints.x2 - x1,
            cp2y: connection.controlPoints.y2 - y1
        };

        updateConnections();
    }

    function stopDragging() {
        isDragging = false;
        connection.isDragging = false;
    }
}

function updateConnections() {
    connections.forEach(conn => {
        const rect1 = conn.from.getBoundingClientRect();
        const rect2 = conn.to.getBoundingClientRect();
        const canvasRect = document.getElementById('canvas').getBoundingClientRect();

        // 計算起點和終點
        const x1 = rect1.left + rect1.width/2 - canvasRect.left;
        const y1 = rect1.top + rect1.height/2 - canvasRect.top;
        const x2 = rect2.left + rect2.width/2 - canvasRect.left;
        const y2 = rect2.top + rect2.height/2 - canvasRect.top;

        // 如果控制點未初始化，設置預設位置
        if (!conn.controlPoints.x1) {
            conn.controlPoints.x1 = x1 + (x2 - x1) / 3;
            conn.controlPoints.y1 = y1;
            conn.controlPoints.x2 = x1 + (x2 - x1) * 2/3;
            conn.controlPoints.y2 = y2;
        }

        // 更新控制點相對位置
        const dx = x2 - x1;
        const dy = y2 - y1;
        if (!conn.initialState) {
            conn.initialState = {
                dx: dx,
                dy: dy,
                cp1x: conn.controlPoints.x1 - x1,
                cp1y: conn.controlPoints.y1 - y1,
                cp2x: conn.controlPoints.x2 - x1,
                cp2y: conn.controlPoints.y2 - y1
            };
        }

        // 根據節點移動更新控制點位置
        if (!conn.isDragging) {
            const scale = {
                x: dx / conn.initialState.dx,
                y: dy / conn.initialState.dy
            };

            conn.controlPoints.x1 = x1 + conn.initialState.cp1x * scale.x;
            conn.controlPoints.y1 = y1 + conn.initialState.cp1y * scale.y;
            conn.controlPoints.x2 = x1 + conn.initialState.cp2x * scale.x;
            conn.controlPoints.y2 = y1 + conn.initialState.cp2y * scale.y;
        }

        // 更新路徑
        const pathData = `M ${x1} ${y1} ` +
                        `C ${conn.controlPoints.x1} ${conn.controlPoints.y1}, ` +
                        `${conn.controlPoints.x2} ${conn.controlPoints.y2}, ` +
                        `${x2} ${y2}`;
        conn.path.setAttribute('d', pathData);

        // 更新控制點位置
        conn.controlPoint1.setAttribute('cx', conn.controlPoints.x1);
        conn.controlPoint1.setAttribute('cy', conn.controlPoints.y1);
        conn.controlPoint2.setAttribute('cx', conn.controlPoints.x2);
        conn.controlPoint2.setAttribute('cy', conn.controlPoints.y2);

        // 計算曲線中點（貝茲曲線的參數 t = 0.5 時的點）
        const midX = getBezierPoint(0.5, x1, conn.controlPoints.x1, conn.controlPoints.x2, x2);
        const midY = getBezierPoint(0.5, y1, conn.controlPoints.y1, conn.controlPoints.y2, y2);

        // 更新文字位置到曲線的中點
        conn.textElement.style.left = midX + 'px';
        conn.textElement.style.top = midY + 'px';
    });
}

function downloadOfflineVersion() {
    // 複製當前的 HTML 內容
    let currentHTML = document.documentElement.outerHTML;
    
    // 移除原有的 fetch 相關代碼
    const fetchPattern = /fetch\(SCRIPT_URL\)[\s\S]*?\.catch\(error => console\.error\('Error:', error\)\);/;
    
    // 建立內建資料初始化程式碼
    const initCode = `
        // 初始化
        const globalData = ${JSON.stringify(globalData, null, 2)};
        
        // 直接初始化章節選單
        document.addEventListener('DOMContentLoaded', function() {
            initializeChapterSelect(globalData.chapters);
        });
    `;
    
    // 替換 fetch 相關程式碼
    currentHTML = currentHTML.replace(fetchPattern, initCode);
    
    // 移除 SCRIPT_URL 定義
    currentHTML = currentHTML.replace(/const SCRIPT_URL = .*?;/, '');
    
    // 建立 Blob 物件
    const blob = new Blob([currentHTML], { type: 'text/html' });
    
    // 建立下載連結
    const downloadLink = document.createElement('a');
    downloadLink.href = URL.createObjectURL(blob);
    downloadLink.download = '概念圖製作工具_離線版.html';
    
    // 觸發下載
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
    
    // 釋放 URL 物件
    URL.revokeObjectURL(downloadLink.href);
}

// 添加貝茲曲線計算函數
function getBezierPoint(t, p0, p1, p2, p3) {
    const mt = 1 - t;
    return Math.pow(mt, 3) * p0 + 
           3 * Math.pow(mt, 2) * t * p1 + 
           3 * mt * Math.pow(t, 2) * p2 + 
           Math.pow(t, 3) * p3;
}

        // 刪除選取的元素
       function deleteSelected() {
    selectedNodes.forEach(node => {
        // 找出所有與當前節點相關的連接
        const relatedConnections = connections.filter(conn => 
            conn.from === node || conn.to === node
        );

        // 刪除相關的連接
        relatedConnections.forEach(conn => {
            // 移除 SVG 路徑
            conn.path.remove();
            // 移除控制點
            conn.controlPoint1.remove();
            conn.controlPoint2.remove();
            // 移除關連詞彙文字
            conn.textElement.remove();
        });

        // 更新 connections 陣列，移除已刪除的連接
        connections = connections.filter(conn => 
            conn.from !== node && conn.to !== node
        );
        
        // 移除節點
        node.remove();
        concepts = concepts.filter(n => n !== node);
    });
    
    selectedNodes = [];
    saveState();
}

        // 狀態管理
	// 修改 saveState 函數，確保保存正確的文字內容
	function saveState() {
    		const state = {
        		concepts: concepts.map(node => ({
            text: node.childNodes[0].nodeType === Node.TEXT_NODE 
                ? node.childNodes[0].textContent 
                : node.textContent,
            left: node.style.left,
            top: node.style.top
        })),
        connections: connections.map(conn => ({
            fromIndex: concepts.indexOf(conn.from),
            toIndex: concepts.indexOf(conn.to),
            text: conn.textElement.textContent
        }))
    };
    undoStack.push(JSON.stringify(state));
}


        function undo() {
    if (undoStack.length > 1) {
        undoStack.pop(); // 移除當前狀態
        const previousState = JSON.parse(undoStack[undoStack.length - 1]);
        
        // 清空畫布
        concepts.forEach(node => node.remove());
        connections.forEach(conn => {
            conn.path.remove();
            conn.controlPoint1.remove();
            conn.controlPoint2.remove();
            conn.textElement.remove();
        });
        
        concepts = [];
        connections = [];
        selectedNodes = [];

        // 重建狀態
        previousState.concepts.forEach(conceptData => {
            const node = document.createElement('div');
            node.className = 'concept-node';
            node.textContent = conceptData.text;  // 使用保存的文字
            node.style.left = conceptData.left;
            node.style.top = conceptData.top;

            // 添加提示框
            const tooltip = document.createElement('div');
            tooltip.className = 'concept-tooltip';
            tooltip.textContent = globalData.conceptDescriptions[conceptData.text] || '暫無描述';
            node.appendChild(tooltip);

            node.addEventListener('mousedown', startDrag);
            node.addEventListener('click', toggleSelect);

            document.getElementById('canvas').appendChild(node);
            concepts.push(node);
        });

        // 重建連接
        previousState.connections.forEach(connData => {
            createConnection(
                concepts[connData.fromIndex],
                concepts[connData.toIndex],
                connData.text
            );
        });
    }
}


        // 匯出功能
       // PNG 匯出功能
function exportToPNG() {
    const container = document.querySelector('.canvas-container');
    
    // 創建臨時 canvas
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    
    // 設置 canvas 大小
    canvas.width = container.offsetWidth;
    canvas.height = container.offsetHeight;
    
    // 設置白色背景
    context.fillStyle = 'white';
    context.fillRect(0, 0, canvas.width, canvas.height);

    // 使用 html2canvas 捕獲畫面
    html2canvas(container, {
        backgroundColor: '#ffffff',
        scale: 2, // 提高解析度
        useCORS: true,
        allowTaint: true
    }).then(canvas => {
        // 創建下載連結
        const link = document.createElement('a');
        link.download = '概念圖.png';
        link.href = canvas.toDataURL('image/png');
        link.click();
    });
}

// PDF 匯出功能
function exportToPDF() {
    const container = document.querySelector('.canvas-container');
    
    html2canvas(container, {
        backgroundColor: '#ffffff',
        scale: 2,
        useCORS: true,
        allowTaint: true
    }).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        
        // 創建 PDF
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF({
            orientation: canvas.width > canvas.height ? 'landscape' : 'portrait',
            unit: 'px',
            format: [canvas.width, canvas.height]
        });

        // 添加圖片到 PDF
        pdf.addImage(
            imgData,
            'PNG',
            0,
            0,
            canvas.width,
            canvas.height
        );

        // 下載 PDF
        pdf.save('概念圖.pdf');
    });
}

// Draw.io 匯出功能
function exportToDrawIO() {
    let xmlContent = '<?xml version="1.0" encoding="UTF-8"?>\n';
    xmlContent += '<mxfile host="Electron" modified="2023-08-01T00:00:00.000Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/14.6.13 Chrome/89.0.4389.128 Electron/12.0.7 Safari/537.36" etag="your-etag" version="14.6.13" type="device">\n';
    xmlContent += '<diagram id="your-diagram-id" name="Page-1">\n';
    xmlContent += '<mxGraphModel dx="1422" dy="798" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">\n';
    xmlContent += '<root>\n';
    xmlContent += '<mxCell id="0"/>\n';
    xmlContent += '<mxCell id="1" parent="0"/>\n';

    // 添加節點
    concepts.forEach((node, index) => {
        const rect = node.getBoundingClientRect();
        xmlContent += `<mxCell id="node${index}" value="${node.textContent}" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1">\n`;
        xmlContent += `<mxGeometry x="${rect.left}" y="${rect.top}" width="${rect.width}" height="${rect.height}" as="geometry"/>\n`;
        xmlContent += '</mxCell>\n';
    });

    // 添加連接線
    connections.forEach((conn, index) => {
        const fromIndex = concepts.indexOf(conn.from);
        const toIndex = concepts.indexOf(conn.to);
        xmlContent += `<mxCell id="edge${index}" value="${conn.textElement.textContent}" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="node${fromIndex}" target="node${toIndex}">\n`;
        xmlContent += '<mxGeometry relative="1" as="geometry"/>\n';
        xmlContent += '</mxCell>\n';
    });

    xmlContent += '</root>\n</mxGraphModel>\n</diagram>\n</mxfile>';

    // 創建並下載檔案
    const blob = new Blob([xmlContent], { type: 'application/xml' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = '概念圖.drawio';
    link.click();
    URL.revokeObjectURL(link.href);
}

        // 初始狀態
        saveState();

        // 視窗大小改變時更新連接線
        window.addEventListener('resize', updateConnections);
    </script>
</body>
</html>
